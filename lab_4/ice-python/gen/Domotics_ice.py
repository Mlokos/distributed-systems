# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.4
#
# <auto-generated>
#
# Generated from file `Domotics.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Domotics
_M_Domotics = Ice.openModule('Domotics')
__name__ = 'Domotics'

_M_Domotics._t_Heater = IcePy.defineValue('::Domotics::Heater', Ice.Value, -1, (), False, True, None, ())

if 'HeaterPrx' not in _M_Domotics.__dict__:
    _M_Domotics.HeaterPrx = Ice.createTempClass()
    class HeaterPrx(Ice.ObjectPrx):

        def getTemperature(self, context=None):
            return _M_Domotics.Heater._op_getTemperature.invoke(self, ((), context))

        def getTemperatureAsync(self, context=None):
            return _M_Domotics.Heater._op_getTemperature.invokeAsync(self, ((), context))

        def begin_getTemperature(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Domotics.Heater._op_getTemperature.begin(self, ((), _response, _ex, _sent, context))

        def end_getTemperature(self, _r):
            return _M_Domotics.Heater._op_getTemperature.end(self, _r)

        def setTemperature(self, temperature, context=None):
            return _M_Domotics.Heater._op_setTemperature.invoke(self, ((temperature, ), context))

        def setTemperatureAsync(self, temperature, context=None):
            return _M_Domotics.Heater._op_setTemperature.invokeAsync(self, ((temperature, ), context))

        def begin_setTemperature(self, temperature, _response=None, _ex=None, _sent=None, context=None):
            return _M_Domotics.Heater._op_setTemperature.begin(self, ((temperature, ), _response, _ex, _sent, context))

        def end_setTemperature(self, _r):
            return _M_Domotics.Heater._op_setTemperature.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Domotics.HeaterPrx.ice_checkedCast(proxy, '::Domotics::Heater', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Domotics.HeaterPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Domotics::Heater'
    _M_Domotics._t_HeaterPrx = IcePy.defineProxy('::Domotics::Heater', HeaterPrx)

    _M_Domotics.HeaterPrx = HeaterPrx
    del HeaterPrx

    _M_Domotics.Heater = Ice.createTempClass()
    class Heater(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Domotics::Heater', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Domotics::Heater'

        @staticmethod
        def ice_staticId():
            return '::Domotics::Heater'

        def getTemperature(self, current=None):
            raise NotImplementedError("servant method 'getTemperature' not implemented")

        def setTemperature(self, temperature, current=None):
            raise NotImplementedError("servant method 'setTemperature' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Domotics._t_HeaterDisp)

        __repr__ = __str__

    _M_Domotics._t_HeaterDisp = IcePy.defineClass('::Domotics::Heater', Heater, (), None, ())
    Heater._ice_type = _M_Domotics._t_HeaterDisp

    Heater._op_getTemperature = IcePy.Operation('getTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    Heater._op_setTemperature = IcePy.Operation('setTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())

    _M_Domotics.Heater = Heater
    del Heater

_M_Domotics._t_StaticCamera = IcePy.defineValue('::Domotics::StaticCamera', Ice.Value, -1, (), False, True, None, ())

if 'StaticCameraPrx' not in _M_Domotics.__dict__:
    _M_Domotics.StaticCameraPrx = Ice.createTempClass()
    class StaticCameraPrx(Ice.ObjectPrx):

        def getZoom(self, context=None):
            return _M_Domotics.StaticCamera._op_getZoom.invoke(self, ((), context))

        def getZoomAsync(self, context=None):
            return _M_Domotics.StaticCamera._op_getZoom.invokeAsync(self, ((), context))

        def begin_getZoom(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Domotics.StaticCamera._op_getZoom.begin(self, ((), _response, _ex, _sent, context))

        def end_getZoom(self, _r):
            return _M_Domotics.StaticCamera._op_getZoom.end(self, _r)

        def setZoom(self, zoom, context=None):
            return _M_Domotics.StaticCamera._op_setZoom.invoke(self, ((zoom, ), context))

        def setZoomAsync(self, zoom, context=None):
            return _M_Domotics.StaticCamera._op_setZoom.invokeAsync(self, ((zoom, ), context))

        def begin_setZoom(self, zoom, _response=None, _ex=None, _sent=None, context=None):
            return _M_Domotics.StaticCamera._op_setZoom.begin(self, ((zoom, ), _response, _ex, _sent, context))

        def end_setZoom(self, _r):
            return _M_Domotics.StaticCamera._op_setZoom.end(self, _r)

        def isRecording(self, context=None):
            return _M_Domotics.StaticCamera._op_isRecording.invoke(self, ((), context))

        def isRecordingAsync(self, context=None):
            return _M_Domotics.StaticCamera._op_isRecording.invokeAsync(self, ((), context))

        def begin_isRecording(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Domotics.StaticCamera._op_isRecording.begin(self, ((), _response, _ex, _sent, context))

        def end_isRecording(self, _r):
            return _M_Domotics.StaticCamera._op_isRecording.end(self, _r)

        def setRecording(self, record, context=None):
            return _M_Domotics.StaticCamera._op_setRecording.invoke(self, ((record, ), context))

        def setRecordingAsync(self, record, context=None):
            return _M_Domotics.StaticCamera._op_setRecording.invokeAsync(self, ((record, ), context))

        def begin_setRecording(self, record, _response=None, _ex=None, _sent=None, context=None):
            return _M_Domotics.StaticCamera._op_setRecording.begin(self, ((record, ), _response, _ex, _sent, context))

        def end_setRecording(self, _r):
            return _M_Domotics.StaticCamera._op_setRecording.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Domotics.StaticCameraPrx.ice_checkedCast(proxy, '::Domotics::StaticCamera', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Domotics.StaticCameraPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Domotics::StaticCamera'
    _M_Domotics._t_StaticCameraPrx = IcePy.defineProxy('::Domotics::StaticCamera', StaticCameraPrx)

    _M_Domotics.StaticCameraPrx = StaticCameraPrx
    del StaticCameraPrx

    _M_Domotics.StaticCamera = Ice.createTempClass()
    class StaticCamera(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Domotics::StaticCamera', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Domotics::StaticCamera'

        @staticmethod
        def ice_staticId():
            return '::Domotics::StaticCamera'

        def getZoom(self, current=None):
            raise NotImplementedError("servant method 'getZoom' not implemented")

        def setZoom(self, zoom, current=None):
            raise NotImplementedError("servant method 'setZoom' not implemented")

        def isRecording(self, current=None):
            raise NotImplementedError("servant method 'isRecording' not implemented")

        def setRecording(self, record, current=None):
            raise NotImplementedError("servant method 'setRecording' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Domotics._t_StaticCameraDisp)

        __repr__ = __str__

    _M_Domotics._t_StaticCameraDisp = IcePy.defineClass('::Domotics::StaticCamera', StaticCamera, (), None, ())
    StaticCamera._ice_type = _M_Domotics._t_StaticCameraDisp

    StaticCamera._op_getZoom = IcePy.Operation('getZoom', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    StaticCamera._op_setZoom = IcePy.Operation('setZoom', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    StaticCamera._op_isRecording = IcePy.Operation('isRecording', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    StaticCamera._op_setRecording = IcePy.Operation('setRecording', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_bool, False, 0),), (), None, ())

    _M_Domotics.StaticCamera = StaticCamera
    del StaticCamera

_M_Domotics._t_DynamicCamera = IcePy.defineValue('::Domotics::DynamicCamera', Ice.Value, -1, (), False, True, None, ())

if 'DynamicCameraPrx' not in _M_Domotics.__dict__:
    _M_Domotics.DynamicCameraPrx = Ice.createTempClass()
    class DynamicCameraPrx(_M_Domotics.StaticCameraPrx):

        def getAngle(self, context=None):
            return _M_Domotics.DynamicCamera._op_getAngle.invoke(self, ((), context))

        def getAngleAsync(self, context=None):
            return _M_Domotics.DynamicCamera._op_getAngle.invokeAsync(self, ((), context))

        def begin_getAngle(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Domotics.DynamicCamera._op_getAngle.begin(self, ((), _response, _ex, _sent, context))

        def end_getAngle(self, _r):
            return _M_Domotics.DynamicCamera._op_getAngle.end(self, _r)

        def setAngle(self, angle, context=None):
            return _M_Domotics.DynamicCamera._op_setAngle.invoke(self, ((angle, ), context))

        def setAngleAsync(self, angle, context=None):
            return _M_Domotics.DynamicCamera._op_setAngle.invokeAsync(self, ((angle, ), context))

        def begin_setAngle(self, angle, _response=None, _ex=None, _sent=None, context=None):
            return _M_Domotics.DynamicCamera._op_setAngle.begin(self, ((angle, ), _response, _ex, _sent, context))

        def end_setAngle(self, _r):
            return _M_Domotics.DynamicCamera._op_setAngle.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Domotics.DynamicCameraPrx.ice_checkedCast(proxy, '::Domotics::DynamicCamera', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Domotics.DynamicCameraPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Domotics::DynamicCamera'
    _M_Domotics._t_DynamicCameraPrx = IcePy.defineProxy('::Domotics::DynamicCamera', DynamicCameraPrx)

    _M_Domotics.DynamicCameraPrx = DynamicCameraPrx
    del DynamicCameraPrx

    _M_Domotics.DynamicCamera = Ice.createTempClass()
    class DynamicCamera(_M_Domotics.StaticCamera):

        def ice_ids(self, current=None):
            return ('::Domotics::DynamicCamera', '::Domotics::StaticCamera', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Domotics::DynamicCamera'

        @staticmethod
        def ice_staticId():
            return '::Domotics::DynamicCamera'

        def getAngle(self, current=None):
            raise NotImplementedError("servant method 'getAngle' not implemented")

        def setAngle(self, angle, current=None):
            raise NotImplementedError("servant method 'setAngle' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Domotics._t_DynamicCameraDisp)

        __repr__ = __str__

    _M_Domotics._t_DynamicCameraDisp = IcePy.defineClass('::Domotics::DynamicCamera', DynamicCamera, (), None, (_M_Domotics._t_StaticCameraDisp,))
    DynamicCamera._ice_type = _M_Domotics._t_DynamicCameraDisp

    DynamicCamera._op_getAngle = IcePy.Operation('getAngle', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    DynamicCamera._op_setAngle = IcePy.Operation('setAngle', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())

    _M_Domotics.DynamicCamera = DynamicCamera
    del DynamicCamera

_M_Domotics._t_Lamp = IcePy.defineValue('::Domotics::Lamp', Ice.Value, -1, (), False, True, None, ())

if 'LampPrx' not in _M_Domotics.__dict__:
    _M_Domotics.LampPrx = Ice.createTempClass()
    class LampPrx(Ice.ObjectPrx):

        def getBrightness(self, context=None):
            return _M_Domotics.Lamp._op_getBrightness.invoke(self, ((), context))

        def getBrightnessAsync(self, context=None):
            return _M_Domotics.Lamp._op_getBrightness.invokeAsync(self, ((), context))

        def begin_getBrightness(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Domotics.Lamp._op_getBrightness.begin(self, ((), _response, _ex, _sent, context))

        def end_getBrightness(self, _r):
            return _M_Domotics.Lamp._op_getBrightness.end(self, _r)

        def setBrightness(self, brightness, context=None):
            return _M_Domotics.Lamp._op_setBrightness.invoke(self, ((brightness, ), context))

        def setBrightnessAsync(self, brightness, context=None):
            return _M_Domotics.Lamp._op_setBrightness.invokeAsync(self, ((brightness, ), context))

        def begin_setBrightness(self, brightness, _response=None, _ex=None, _sent=None, context=None):
            return _M_Domotics.Lamp._op_setBrightness.begin(self, ((brightness, ), _response, _ex, _sent, context))

        def end_setBrightness(self, _r):
            return _M_Domotics.Lamp._op_setBrightness.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Domotics.LampPrx.ice_checkedCast(proxy, '::Domotics::Lamp', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Domotics.LampPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Domotics::Lamp'
    _M_Domotics._t_LampPrx = IcePy.defineProxy('::Domotics::Lamp', LampPrx)

    _M_Domotics.LampPrx = LampPrx
    del LampPrx

    _M_Domotics.Lamp = Ice.createTempClass()
    class Lamp(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Domotics::Lamp', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Domotics::Lamp'

        @staticmethod
        def ice_staticId():
            return '::Domotics::Lamp'

        def getBrightness(self, current=None):
            raise NotImplementedError("servant method 'getBrightness' not implemented")

        def setBrightness(self, brightness, current=None):
            raise NotImplementedError("servant method 'setBrightness' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Domotics._t_LampDisp)

        __repr__ = __str__

    _M_Domotics._t_LampDisp = IcePy.defineClass('::Domotics::Lamp', Lamp, (), None, ())
    Lamp._ice_type = _M_Domotics._t_LampDisp

    Lamp._op_getBrightness = IcePy.Operation('getBrightness', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    Lamp._op_setBrightness = IcePy.Operation('setBrightness', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())

    _M_Domotics.Lamp = Lamp
    del Lamp

if 'colorRGB' not in _M_Domotics.__dict__:
    _M_Domotics.colorRGB = Ice.createTempClass()
    class colorRGB(object):
        def __init__(self, red=0, green=0, blue=0):
            self.red = red
            self.green = green
            self.blue = blue

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.red)
            _h = 5 * _h + Ice.getHash(self.green)
            _h = 5 * _h + Ice.getHash(self.blue)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Domotics.colorRGB):
                return NotImplemented
            else:
                if self.red is None or other.red is None:
                    if self.red != other.red:
                        return (-1 if self.red is None else 1)
                else:
                    if self.red < other.red:
                        return -1
                    elif self.red > other.red:
                        return 1
                if self.green is None or other.green is None:
                    if self.green != other.green:
                        return (-1 if self.green is None else 1)
                else:
                    if self.green < other.green:
                        return -1
                    elif self.green > other.green:
                        return 1
                if self.blue is None or other.blue is None:
                    if self.blue != other.blue:
                        return (-1 if self.blue is None else 1)
                else:
                    if self.blue < other.blue:
                        return -1
                    elif self.blue > other.blue:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Domotics._t_colorRGB)

        __repr__ = __str__

    _M_Domotics._t_colorRGB = IcePy.defineStruct('::Domotics::colorRGB', colorRGB, (), (
        ('red', (), IcePy._t_int),
        ('green', (), IcePy._t_int),
        ('blue', (), IcePy._t_int)
    ))

    _M_Domotics.colorRGB = colorRGB
    del colorRGB

_M_Domotics._t_RGBLamp = IcePy.defineValue('::Domotics::RGBLamp', Ice.Value, -1, (), False, True, None, ())

if 'RGBLampPrx' not in _M_Domotics.__dict__:
    _M_Domotics.RGBLampPrx = Ice.createTempClass()
    class RGBLampPrx(_M_Domotics.LampPrx):

        def getColor(self, context=None):
            return _M_Domotics.RGBLamp._op_getColor.invoke(self, ((), context))

        def getColorAsync(self, context=None):
            return _M_Domotics.RGBLamp._op_getColor.invokeAsync(self, ((), context))

        def begin_getColor(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Domotics.RGBLamp._op_getColor.begin(self, ((), _response, _ex, _sent, context))

        def end_getColor(self, _r):
            return _M_Domotics.RGBLamp._op_getColor.end(self, _r)

        def setColor(self, color, context=None):
            return _M_Domotics.RGBLamp._op_setColor.invoke(self, ((color, ), context))

        def setColorAsync(self, color, context=None):
            return _M_Domotics.RGBLamp._op_setColor.invokeAsync(self, ((color, ), context))

        def begin_setColor(self, color, _response=None, _ex=None, _sent=None, context=None):
            return _M_Domotics.RGBLamp._op_setColor.begin(self, ((color, ), _response, _ex, _sent, context))

        def end_setColor(self, _r):
            return _M_Domotics.RGBLamp._op_setColor.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Domotics.RGBLampPrx.ice_checkedCast(proxy, '::Domotics::RGBLamp', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Domotics.RGBLampPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Domotics::RGBLamp'
    _M_Domotics._t_RGBLampPrx = IcePy.defineProxy('::Domotics::RGBLamp', RGBLampPrx)

    _M_Domotics.RGBLampPrx = RGBLampPrx
    del RGBLampPrx

    _M_Domotics.RGBLamp = Ice.createTempClass()
    class RGBLamp(_M_Domotics.Lamp):

        def ice_ids(self, current=None):
            return ('::Domotics::Lamp', '::Domotics::RGBLamp', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Domotics::RGBLamp'

        @staticmethod
        def ice_staticId():
            return '::Domotics::RGBLamp'

        def getColor(self, current=None):
            raise NotImplementedError("servant method 'getColor' not implemented")

        def setColor(self, color, current=None):
            raise NotImplementedError("servant method 'setColor' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Domotics._t_RGBLampDisp)

        __repr__ = __str__

    _M_Domotics._t_RGBLampDisp = IcePy.defineClass('::Domotics::RGBLamp', RGBLamp, (), None, (_M_Domotics._t_LampDisp,))
    RGBLamp._ice_type = _M_Domotics._t_RGBLampDisp

    RGBLamp._op_getColor = IcePy.Operation('getColor', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Domotics._t_colorRGB, False, 0), ())
    RGBLamp._op_setColor = IcePy.Operation('setColor', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Domotics._t_colorRGB, False, 0),), (), None, ())

    _M_Domotics.RGBLamp = RGBLamp
    del RGBLamp

# End of module Domotics
