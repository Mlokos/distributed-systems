//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.4
//
// <auto-generated>
//
// Generated from file `Domotics.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Domotics.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 4
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::Domotics::ImproperValue> iceC_Domotics_ImproperValue_init("::Domotics::ImproperValue");

const ::std::string iceC_Domotics_Heater_ids[2] =
{
    "::Domotics::Heater",
    "::Ice::Object"
};
const ::std::string iceC_Domotics_Heater_ops[] =
{
    "getTemperature",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setTemperature"
};
const ::std::string iceC_Domotics_Heater_getTemperature_name = "getTemperature";
const ::std::string iceC_Domotics_Heater_setTemperature_name = "setTemperature";

const ::std::string iceC_Domotics_StaticCamera_ids[2] =
{
    "::Domotics::StaticCamera",
    "::Ice::Object"
};
const ::std::string iceC_Domotics_StaticCamera_ops[] =
{
    "getZoom",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "isRecording",
    "setRecording",
    "setZoom"
};
const ::std::string iceC_Domotics_StaticCamera_getZoom_name = "getZoom";
const ::std::string iceC_Domotics_StaticCamera_setZoom_name = "setZoom";
const ::std::string iceC_Domotics_StaticCamera_isRecording_name = "isRecording";
const ::std::string iceC_Domotics_StaticCamera_setRecording_name = "setRecording";

const ::std::string iceC_Domotics_DynamicCamera_ids[3] =
{
    "::Domotics::DynamicCamera",
    "::Domotics::StaticCamera",
    "::Ice::Object"
};
const ::std::string iceC_Domotics_DynamicCamera_ops[] =
{
    "getAngle",
    "getZoom",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "isRecording",
    "setAngle",
    "setRecording",
    "setZoom"
};
const ::std::string iceC_Domotics_DynamicCamera_getAngle_name = "getAngle";
const ::std::string iceC_Domotics_DynamicCamera_setAngle_name = "setAngle";

const ::std::string iceC_Domotics_Lamp_ids[2] =
{
    "::Domotics::Lamp",
    "::Ice::Object"
};
const ::std::string iceC_Domotics_Lamp_ops[] =
{
    "getBrightness",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setBrightness"
};
const ::std::string iceC_Domotics_Lamp_getBrightness_name = "getBrightness";
const ::std::string iceC_Domotics_Lamp_setBrightness_name = "setBrightness";

const ::std::string iceC_Domotics_RGBLamp_ids[3] =
{
    "::Domotics::Lamp",
    "::Domotics::RGBLamp",
    "::Ice::Object"
};
const ::std::string iceC_Domotics_RGBLamp_ops[] =
{
    "getBrightness",
    "getColor",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setBrightness",
    "setColor"
};
const ::std::string iceC_Domotics_RGBLamp_getColor_name = "getColor";
const ::std::string iceC_Domotics_RGBLamp_setColor_name = "setColor";

}

Domotics::ImproperValue::~ImproperValue()
{
}

const ::std::string&
Domotics::ImproperValue::ice_staticId()
{
    static const ::std::string typeId = "::Domotics::ImproperValue";
    return typeId;
}

bool
Domotics::Heater::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Domotics_Heater_ids, iceC_Domotics_Heater_ids + 2, s);
}

::std::vector<::std::string>
Domotics::Heater::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Domotics_Heater_ids[0], &iceC_Domotics_Heater_ids[2]);
}

::std::string
Domotics::Heater::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Domotics::Heater::ice_staticId()
{
    static const ::std::string typeId = "::Domotics::Heater";
    return typeId;
}

/// \cond INTERNAL
bool
Domotics::Heater::_iceD_getTemperature(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    int ret = this->getTemperature(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Domotics::Heater::_iceD_setTemperature(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_temperature;
    istr->readAll(iceP_temperature);
    inS.endReadParams();
    this->setTemperature(iceP_temperature, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Domotics::Heater::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Domotics_Heater_ops, iceC_Domotics_Heater_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Domotics_Heater_ops)
    {
        case 0:
        {
            return _iceD_getTemperature(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_setTemperature(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Domotics::StaticCamera::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Domotics_StaticCamera_ids, iceC_Domotics_StaticCamera_ids + 2, s);
}

::std::vector<::std::string>
Domotics::StaticCamera::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Domotics_StaticCamera_ids[0], &iceC_Domotics_StaticCamera_ids[2]);
}

::std::string
Domotics::StaticCamera::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Domotics::StaticCamera::ice_staticId()
{
    static const ::std::string typeId = "::Domotics::StaticCamera";
    return typeId;
}

/// \cond INTERNAL
bool
Domotics::StaticCamera::_iceD_getZoom(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    int ret = this->getZoom(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Domotics::StaticCamera::_iceD_setZoom(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_zoom;
    istr->readAll(iceP_zoom);
    inS.endReadParams();
    this->setZoom(iceP_zoom, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Domotics::StaticCamera::_iceD_isRecording(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    bool ret = this->isRecording(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Domotics::StaticCamera::_iceD_setRecording(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    bool iceP_record;
    istr->readAll(iceP_record);
    inS.endReadParams();
    this->setRecording(iceP_record, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Domotics::StaticCamera::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Domotics_StaticCamera_ops, iceC_Domotics_StaticCamera_ops + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Domotics_StaticCamera_ops)
    {
        case 0:
        {
            return _iceD_getZoom(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_isRecording(in, current);
        }
        case 6:
        {
            return _iceD_setRecording(in, current);
        }
        case 7:
        {
            return _iceD_setZoom(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Domotics::DynamicCamera::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Domotics_DynamicCamera_ids, iceC_Domotics_DynamicCamera_ids + 3, s);
}

::std::vector<::std::string>
Domotics::DynamicCamera::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Domotics_DynamicCamera_ids[0], &iceC_Domotics_DynamicCamera_ids[3]);
}

::std::string
Domotics::DynamicCamera::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Domotics::DynamicCamera::ice_staticId()
{
    static const ::std::string typeId = "::Domotics::DynamicCamera";
    return typeId;
}

/// \cond INTERNAL
bool
Domotics::DynamicCamera::_iceD_getAngle(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    int ret = this->getAngle(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Domotics::DynamicCamera::_iceD_setAngle(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_angle;
    istr->readAll(iceP_angle);
    inS.endReadParams();
    this->setAngle(iceP_angle, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Domotics::DynamicCamera::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Domotics_DynamicCamera_ops, iceC_Domotics_DynamicCamera_ops + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Domotics_DynamicCamera_ops)
    {
        case 0:
        {
            return _iceD_getAngle(in, current);
        }
        case 1:
        {
            return _iceD_getZoom(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_isRecording(in, current);
        }
        case 7:
        {
            return _iceD_setAngle(in, current);
        }
        case 8:
        {
            return _iceD_setRecording(in, current);
        }
        case 9:
        {
            return _iceD_setZoom(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Domotics::Lamp::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Domotics_Lamp_ids, iceC_Domotics_Lamp_ids + 2, s);
}

::std::vector<::std::string>
Domotics::Lamp::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Domotics_Lamp_ids[0], &iceC_Domotics_Lamp_ids[2]);
}

::std::string
Domotics::Lamp::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Domotics::Lamp::ice_staticId()
{
    static const ::std::string typeId = "::Domotics::Lamp";
    return typeId;
}

/// \cond INTERNAL
bool
Domotics::Lamp::_iceD_getBrightness(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    int ret = this->getBrightness(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Domotics::Lamp::_iceD_setBrightness(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_brightness;
    istr->readAll(iceP_brightness);
    inS.endReadParams();
    this->setBrightness(iceP_brightness, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Domotics::Lamp::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Domotics_Lamp_ops, iceC_Domotics_Lamp_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Domotics_Lamp_ops)
    {
        case 0:
        {
            return _iceD_getBrightness(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_setBrightness(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Domotics::RGBLamp::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Domotics_RGBLamp_ids, iceC_Domotics_RGBLamp_ids + 3, s);
}

::std::vector<::std::string>
Domotics::RGBLamp::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Domotics_RGBLamp_ids[0], &iceC_Domotics_RGBLamp_ids[3]);
}

::std::string
Domotics::RGBLamp::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Domotics::RGBLamp::ice_staticId()
{
    static const ::std::string typeId = "::Domotics::RGBLamp";
    return typeId;
}

/// \cond INTERNAL
bool
Domotics::RGBLamp::_iceD_getColor(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    colorRGB ret = this->getColor(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Domotics::RGBLamp::_iceD_setColor(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    colorRGB iceP_color;
    istr->readAll(iceP_color);
    inS.endReadParams();
    this->setColor(::std::move(iceP_color), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Domotics::RGBLamp::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Domotics_RGBLamp_ops, iceC_Domotics_RGBLamp_ops + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Domotics_RGBLamp_ops)
    {
        case 0:
        {
            return _iceD_getBrightness(in, current);
        }
        case 1:
        {
            return _iceD_getColor(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_setBrightness(in, current);
        }
        case 7:
        {
            return _iceD_setColor(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
Domotics::HeaterPrx::_iceI_getTemperature(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Domotics_Heater_getTemperature_name);
    outAsync->invoke(iceC_Domotics_Heater_getTemperature_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Domotics::HeaterPrx::_iceI_setTemperature(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_temperature, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Domotics_Heater_setTemperature_name);
    outAsync->invoke(iceC_Domotics_Heater_setTemperature_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_temperature);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ImproperValue&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Domotics::HeaterPrx::_newInstance() const
{
    return ::IceInternal::createProxy<HeaterPrx>();
}
/// \endcond

const ::std::string&
Domotics::HeaterPrx::ice_staticId()
{
    return Heater::ice_staticId();
}

/// \cond INTERNAL
void
Domotics::StaticCameraPrx::_iceI_getZoom(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Domotics_StaticCamera_getZoom_name);
    outAsync->invoke(iceC_Domotics_StaticCamera_getZoom_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Domotics::StaticCameraPrx::_iceI_setZoom(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_zoom, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Domotics_StaticCamera_setZoom_name);
    outAsync->invoke(iceC_Domotics_StaticCamera_setZoom_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_zoom);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ImproperValue&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Domotics::StaticCameraPrx::_iceI_isRecording(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Domotics_StaticCamera_isRecording_name);
    outAsync->invoke(iceC_Domotics_StaticCamera_isRecording_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Domotics::StaticCameraPrx::_iceI_setRecording(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, bool iceP_record, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Domotics_StaticCamera_setRecording_name);
    outAsync->invoke(iceC_Domotics_StaticCamera_setRecording_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_record);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ImproperValue&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Domotics::StaticCameraPrx::_newInstance() const
{
    return ::IceInternal::createProxy<StaticCameraPrx>();
}
/// \endcond

const ::std::string&
Domotics::StaticCameraPrx::ice_staticId()
{
    return StaticCamera::ice_staticId();
}

/// \cond INTERNAL
void
Domotics::DynamicCameraPrx::_iceI_getAngle(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Domotics_DynamicCamera_getAngle_name);
    outAsync->invoke(iceC_Domotics_DynamicCamera_getAngle_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Domotics::DynamicCameraPrx::_iceI_setAngle(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_angle, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Domotics_DynamicCamera_setAngle_name);
    outAsync->invoke(iceC_Domotics_DynamicCamera_setAngle_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_angle);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ImproperValue&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Domotics::DynamicCameraPrx::_newInstance() const
{
    return ::IceInternal::createProxy<DynamicCameraPrx>();
}
/// \endcond

const ::std::string&
Domotics::DynamicCameraPrx::ice_staticId()
{
    return DynamicCamera::ice_staticId();
}

/// \cond INTERNAL
void
Domotics::LampPrx::_iceI_getBrightness(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Domotics_Lamp_getBrightness_name);
    outAsync->invoke(iceC_Domotics_Lamp_getBrightness_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Domotics::LampPrx::_iceI_setBrightness(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_brightness, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Domotics_Lamp_setBrightness_name);
    outAsync->invoke(iceC_Domotics_Lamp_setBrightness_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_brightness);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ImproperValue&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Domotics::LampPrx::_newInstance() const
{
    return ::IceInternal::createProxy<LampPrx>();
}
/// \endcond

const ::std::string&
Domotics::LampPrx::ice_staticId()
{
    return Lamp::ice_staticId();
}

/// \cond INTERNAL
void
Domotics::RGBLampPrx::_iceI_getColor(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Domotics::colorRGB>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Domotics_RGBLamp_getColor_name);
    outAsync->invoke(iceC_Domotics_RGBLamp_getColor_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Domotics::RGBLampPrx::_iceI_setColor(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const colorRGB& iceP_color, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Domotics_RGBLamp_setColor_name);
    outAsync->invoke(iceC_Domotics_RGBLamp_setColor_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_color);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ImproperValue&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Domotics::RGBLampPrx::_newInstance() const
{
    return ::IceInternal::createProxy<RGBLampPrx>();
}
/// \endcond

const ::std::string&
Domotics::RGBLampPrx::ice_staticId()
{
    return RGBLamp::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_Domotics_Heater_getTemperature_name = "getTemperature";

const ::std::string iceC_Domotics_Heater_setTemperature_name = "setTemperature";

const ::std::string iceC_Domotics_StaticCamera_getZoom_name = "getZoom";

const ::std::string iceC_Domotics_StaticCamera_setZoom_name = "setZoom";

const ::std::string iceC_Domotics_StaticCamera_isRecording_name = "isRecording";

const ::std::string iceC_Domotics_StaticCamera_setRecording_name = "setRecording";

const ::std::string iceC_Domotics_DynamicCamera_getAngle_name = "getAngle";

const ::std::string iceC_Domotics_DynamicCamera_setAngle_name = "setAngle";

const ::std::string iceC_Domotics_Lamp_getBrightness_name = "getBrightness";

const ::std::string iceC_Domotics_Lamp_setBrightness_name = "setBrightness";

const ::std::string iceC_Domotics_RGBLamp_getColor_name = "getColor";

const ::std::string iceC_Domotics_RGBLamp_setColor_name = "setColor";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Domotics::ImproperValue> iceC_Domotics_ImproperValue_init("::Domotics::ImproperValue");

}

Domotics::ImproperValue::ImproperValue(const ::std::string& message) :
    ::Ice::UserException(),
    message(message)
{
}

Domotics::ImproperValue::~ImproperValue() throw()
{
}

::std::string
Domotics::ImproperValue::ice_id() const
{
    return "::Domotics::ImproperValue";
}

Domotics::ImproperValue*
Domotics::ImproperValue::ice_clone() const
{
    return new ImproperValue(*this);
}

void
Domotics::ImproperValue::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Domotics::ImproperValue::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Domotics::ImproperValue", -1, true);
    ::Ice::StreamWriter< ImproperValue, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Domotics::ImproperValue::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< ImproperValue, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Domotics::upCast(Heater* p) { return p; }

void
::IceProxy::Domotics::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Heater>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Heater;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Domotics::Heater::_iceI_begin_getTemperature(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Domotics_Heater_getTemperature_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Domotics_Heater_getTemperature_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Domotics_Heater_getTemperature_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Domotics_Heater_getTemperature_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::Domotics::Heater::end_getTemperature(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Domotics_Heater_getTemperature_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Domotics::Heater::_iceI_begin_setTemperature(::Ice::Int iceP_temperature, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Domotics_Heater_setTemperature_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Domotics_Heater_setTemperature_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Domotics_Heater_setTemperature_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_temperature);
        result->endWriteParams();
        result->invoke(iceC_Domotics_Heater_setTemperature_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Domotics::Heater::end_setTemperature(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Domotics_Heater_setTemperature_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Domotics::ImproperValue&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Domotics::Heater::_newInstance() const
{
    return new Heater;
}
/// \endcond

const ::std::string&
IceProxy::Domotics::Heater::ice_staticId()
{
    return ::Domotics::Heater::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Domotics::upCast(StaticCamera* p) { return p; }

void
::IceProxy::Domotics::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< StaticCamera>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new StaticCamera;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Domotics::StaticCamera::_iceI_begin_getZoom(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Domotics_StaticCamera_getZoom_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Domotics_StaticCamera_getZoom_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Domotics_StaticCamera_getZoom_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Domotics_StaticCamera_getZoom_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::Domotics::StaticCamera::end_getZoom(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Domotics_StaticCamera_getZoom_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Domotics::StaticCamera::_iceI_begin_setZoom(::Ice::Int iceP_zoom, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Domotics_StaticCamera_setZoom_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Domotics_StaticCamera_setZoom_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Domotics_StaticCamera_setZoom_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_zoom);
        result->endWriteParams();
        result->invoke(iceC_Domotics_StaticCamera_setZoom_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Domotics::StaticCamera::end_setZoom(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Domotics_StaticCamera_setZoom_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Domotics::ImproperValue&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Domotics::StaticCamera::_iceI_begin_isRecording(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Domotics_StaticCamera_isRecording_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Domotics_StaticCamera_isRecording_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Domotics_StaticCamera_isRecording_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Domotics_StaticCamera_isRecording_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::Domotics::StaticCamera::end_isRecording(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Domotics_StaticCamera_isRecording_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Domotics::StaticCamera::_iceI_begin_setRecording(bool iceP_record, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Domotics_StaticCamera_setRecording_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Domotics_StaticCamera_setRecording_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Domotics_StaticCamera_setRecording_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_record);
        result->endWriteParams();
        result->invoke(iceC_Domotics_StaticCamera_setRecording_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Domotics::StaticCamera::end_setRecording(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Domotics_StaticCamera_setRecording_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Domotics::ImproperValue&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Domotics::StaticCamera::_newInstance() const
{
    return new StaticCamera;
}
/// \endcond

const ::std::string&
IceProxy::Domotics::StaticCamera::ice_staticId()
{
    return ::Domotics::StaticCamera::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Domotics::upCast(DynamicCamera* p) { return p; }

void
::IceProxy::Domotics::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< DynamicCamera>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new DynamicCamera;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Domotics::DynamicCamera::_iceI_begin_getAngle(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Domotics_DynamicCamera_getAngle_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Domotics_DynamicCamera_getAngle_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Domotics_DynamicCamera_getAngle_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Domotics_DynamicCamera_getAngle_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::Domotics::DynamicCamera::end_getAngle(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Domotics_DynamicCamera_getAngle_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Domotics::DynamicCamera::_iceI_begin_setAngle(::Ice::Int iceP_angle, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Domotics_DynamicCamera_setAngle_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Domotics_DynamicCamera_setAngle_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Domotics_DynamicCamera_setAngle_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_angle);
        result->endWriteParams();
        result->invoke(iceC_Domotics_DynamicCamera_setAngle_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Domotics::DynamicCamera::end_setAngle(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Domotics_DynamicCamera_setAngle_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Domotics::ImproperValue&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Domotics::DynamicCamera::_newInstance() const
{
    return new DynamicCamera;
}
/// \endcond

const ::std::string&
IceProxy::Domotics::DynamicCamera::ice_staticId()
{
    return ::Domotics::DynamicCamera::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Domotics::upCast(Lamp* p) { return p; }

void
::IceProxy::Domotics::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Lamp>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Lamp;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Domotics::Lamp::_iceI_begin_getBrightness(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Domotics_Lamp_getBrightness_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Domotics_Lamp_getBrightness_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Domotics_Lamp_getBrightness_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Domotics_Lamp_getBrightness_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::Domotics::Lamp::end_getBrightness(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Domotics_Lamp_getBrightness_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Domotics::Lamp::_iceI_begin_setBrightness(::Ice::Int iceP_brightness, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Domotics_Lamp_setBrightness_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Domotics_Lamp_setBrightness_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Domotics_Lamp_setBrightness_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_brightness);
        result->endWriteParams();
        result->invoke(iceC_Domotics_Lamp_setBrightness_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Domotics::Lamp::end_setBrightness(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Domotics_Lamp_setBrightness_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Domotics::ImproperValue&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Domotics::Lamp::_newInstance() const
{
    return new Lamp;
}
/// \endcond

const ::std::string&
IceProxy::Domotics::Lamp::ice_staticId()
{
    return ::Domotics::Lamp::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Domotics::upCast(RGBLamp* p) { return p; }

void
::IceProxy::Domotics::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< RGBLamp>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new RGBLamp;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Domotics::RGBLamp::_iceI_begin_getColor(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Domotics_RGBLamp_getColor_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Domotics_RGBLamp_getColor_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Domotics_RGBLamp_getColor_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Domotics_RGBLamp_getColor_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Domotics::colorRGB
IceProxy::Domotics::RGBLamp::end_getColor(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Domotics_RGBLamp_getColor_name);
    ::Domotics::colorRGB ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Domotics::RGBLamp::_iceI_begin_setColor(const ::Domotics::colorRGB& iceP_color, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Domotics_RGBLamp_setColor_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Domotics_RGBLamp_setColor_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Domotics_RGBLamp_setColor_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_color);
        result->endWriteParams();
        result->invoke(iceC_Domotics_RGBLamp_setColor_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Domotics::RGBLamp::end_setColor(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Domotics_RGBLamp_setColor_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Domotics::ImproperValue&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Domotics::RGBLamp::_newInstance() const
{
    return new RGBLamp;
}
/// \endcond

const ::std::string&
IceProxy::Domotics::RGBLamp::ice_staticId()
{
    return ::Domotics::RGBLamp::ice_staticId();
}

Domotics::Heater::~Heater()
{
}

/// \cond INTERNAL
::Ice::Object* Domotics::upCast(Heater* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Domotics_Heater_ids[2] =
{
    "::Domotics::Heater",
    "::Ice::Object"
};

}

bool
Domotics::Heater::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Domotics_Heater_ids, iceC_Domotics_Heater_ids + 2, s);
}

::std::vector< ::std::string>
Domotics::Heater::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Domotics_Heater_ids[0], &iceC_Domotics_Heater_ids[2]);
}

const ::std::string&
Domotics::Heater::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Domotics::Heater::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Domotics::Heater";
    return typeId;
#else
    return iceC_Domotics_Heater_ids[0];
#endif
}

/// \cond INTERNAL
bool
Domotics::Heater::_iceD_getTemperature(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::Ice::Int ret = this->getTemperature(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Domotics::Heater::_iceD_setTemperature(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_temperature;
    istr->read(iceP_temperature);
    inS.endReadParams();
    this->setTemperature(iceP_temperature, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Domotics_Heater_all[] =
{
    "getTemperature",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setTemperature"
};

}

/// \cond INTERNAL
bool
Domotics::Heater::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Domotics_Heater_all, iceC_Domotics_Heater_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Domotics_Heater_all)
    {
        case 0:
        {
            return _iceD_getTemperature(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_setTemperature(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Domotics::Heater::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Heater, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Domotics::Heater::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Heater, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Domotics::_icePatchObjectPtr(HeaterPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = HeaterPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Heater::ice_staticId(), v);
    }
}
/// \endcond

Domotics::StaticCamera::~StaticCamera()
{
}

/// \cond INTERNAL
::Ice::Object* Domotics::upCast(StaticCamera* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Domotics_StaticCamera_ids[2] =
{
    "::Domotics::StaticCamera",
    "::Ice::Object"
};

}

bool
Domotics::StaticCamera::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Domotics_StaticCamera_ids, iceC_Domotics_StaticCamera_ids + 2, s);
}

::std::vector< ::std::string>
Domotics::StaticCamera::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Domotics_StaticCamera_ids[0], &iceC_Domotics_StaticCamera_ids[2]);
}

const ::std::string&
Domotics::StaticCamera::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Domotics::StaticCamera::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Domotics::StaticCamera";
    return typeId;
#else
    return iceC_Domotics_StaticCamera_ids[0];
#endif
}

/// \cond INTERNAL
bool
Domotics::StaticCamera::_iceD_getZoom(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::Ice::Int ret = this->getZoom(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Domotics::StaticCamera::_iceD_setZoom(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_zoom;
    istr->read(iceP_zoom);
    inS.endReadParams();
    this->setZoom(iceP_zoom, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Domotics::StaticCamera::_iceD_isRecording(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    bool ret = this->isRecording(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Domotics::StaticCamera::_iceD_setRecording(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    bool iceP_record;
    istr->read(iceP_record);
    inS.endReadParams();
    this->setRecording(iceP_record, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Domotics_StaticCamera_all[] =
{
    "getZoom",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "isRecording",
    "setRecording",
    "setZoom"
};

}

/// \cond INTERNAL
bool
Domotics::StaticCamera::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Domotics_StaticCamera_all, iceC_Domotics_StaticCamera_all + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Domotics_StaticCamera_all)
    {
        case 0:
        {
            return _iceD_getZoom(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_isRecording(in, current);
        }
        case 6:
        {
            return _iceD_setRecording(in, current);
        }
        case 7:
        {
            return _iceD_setZoom(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Domotics::StaticCamera::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< StaticCamera, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Domotics::StaticCamera::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< StaticCamera, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Domotics::_icePatchObjectPtr(StaticCameraPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = StaticCameraPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(StaticCamera::ice_staticId(), v);
    }
}
/// \endcond

Domotics::DynamicCamera::~DynamicCamera()
{
}

/// \cond INTERNAL
::Ice::Object* Domotics::upCast(DynamicCamera* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Domotics_DynamicCamera_ids[3] =
{
    "::Domotics::DynamicCamera",
    "::Domotics::StaticCamera",
    "::Ice::Object"
};

}

bool
Domotics::DynamicCamera::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Domotics_DynamicCamera_ids, iceC_Domotics_DynamicCamera_ids + 3, s);
}

::std::vector< ::std::string>
Domotics::DynamicCamera::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Domotics_DynamicCamera_ids[0], &iceC_Domotics_DynamicCamera_ids[3]);
}

const ::std::string&
Domotics::DynamicCamera::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Domotics::DynamicCamera::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Domotics::DynamicCamera";
    return typeId;
#else
    return iceC_Domotics_DynamicCamera_ids[0];
#endif
}

/// \cond INTERNAL
bool
Domotics::DynamicCamera::_iceD_getAngle(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::Ice::Int ret = this->getAngle(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Domotics::DynamicCamera::_iceD_setAngle(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_angle;
    istr->read(iceP_angle);
    inS.endReadParams();
    this->setAngle(iceP_angle, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Domotics_DynamicCamera_all[] =
{
    "getAngle",
    "getZoom",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "isRecording",
    "setAngle",
    "setRecording",
    "setZoom"
};

}

/// \cond INTERNAL
bool
Domotics::DynamicCamera::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Domotics_DynamicCamera_all, iceC_Domotics_DynamicCamera_all + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Domotics_DynamicCamera_all)
    {
        case 0:
        {
            return _iceD_getAngle(in, current);
        }
        case 1:
        {
            return _iceD_getZoom(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_isRecording(in, current);
        }
        case 7:
        {
            return _iceD_setAngle(in, current);
        }
        case 8:
        {
            return _iceD_setRecording(in, current);
        }
        case 9:
        {
            return _iceD_setZoom(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Domotics::DynamicCamera::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< DynamicCamera, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Domotics::DynamicCamera::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< DynamicCamera, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Domotics::_icePatchObjectPtr(DynamicCameraPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = DynamicCameraPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(DynamicCamera::ice_staticId(), v);
    }
}
/// \endcond

Domotics::Lamp::~Lamp()
{
}

/// \cond INTERNAL
::Ice::Object* Domotics::upCast(Lamp* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Domotics_Lamp_ids[2] =
{
    "::Domotics::Lamp",
    "::Ice::Object"
};

}

bool
Domotics::Lamp::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Domotics_Lamp_ids, iceC_Domotics_Lamp_ids + 2, s);
}

::std::vector< ::std::string>
Domotics::Lamp::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Domotics_Lamp_ids[0], &iceC_Domotics_Lamp_ids[2]);
}

const ::std::string&
Domotics::Lamp::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Domotics::Lamp::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Domotics::Lamp";
    return typeId;
#else
    return iceC_Domotics_Lamp_ids[0];
#endif
}

/// \cond INTERNAL
bool
Domotics::Lamp::_iceD_getBrightness(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::Ice::Int ret = this->getBrightness(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Domotics::Lamp::_iceD_setBrightness(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_brightness;
    istr->read(iceP_brightness);
    inS.endReadParams();
    this->setBrightness(iceP_brightness, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Domotics_Lamp_all[] =
{
    "getBrightness",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setBrightness"
};

}

/// \cond INTERNAL
bool
Domotics::Lamp::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Domotics_Lamp_all, iceC_Domotics_Lamp_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Domotics_Lamp_all)
    {
        case 0:
        {
            return _iceD_getBrightness(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_setBrightness(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Domotics::Lamp::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Lamp, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Domotics::Lamp::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Lamp, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Domotics::_icePatchObjectPtr(LampPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = LampPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Lamp::ice_staticId(), v);
    }
}
/// \endcond

Domotics::RGBLamp::~RGBLamp()
{
}

/// \cond INTERNAL
::Ice::Object* Domotics::upCast(RGBLamp* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Domotics_RGBLamp_ids[3] =
{
    "::Domotics::Lamp",
    "::Domotics::RGBLamp",
    "::Ice::Object"
};

}

bool
Domotics::RGBLamp::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Domotics_RGBLamp_ids, iceC_Domotics_RGBLamp_ids + 3, s);
}

::std::vector< ::std::string>
Domotics::RGBLamp::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Domotics_RGBLamp_ids[0], &iceC_Domotics_RGBLamp_ids[3]);
}

const ::std::string&
Domotics::RGBLamp::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Domotics::RGBLamp::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Domotics::RGBLamp";
    return typeId;
#else
    return iceC_Domotics_RGBLamp_ids[1];
#endif
}

/// \cond INTERNAL
bool
Domotics::RGBLamp::_iceD_getColor(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    colorRGB ret = this->getColor(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Domotics::RGBLamp::_iceD_setColor(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    colorRGB iceP_color;
    istr->read(iceP_color);
    inS.endReadParams();
    this->setColor(iceP_color, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Domotics_RGBLamp_all[] =
{
    "getBrightness",
    "getColor",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setBrightness",
    "setColor"
};

}

/// \cond INTERNAL
bool
Domotics::RGBLamp::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Domotics_RGBLamp_all, iceC_Domotics_RGBLamp_all + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Domotics_RGBLamp_all)
    {
        case 0:
        {
            return _iceD_getBrightness(in, current);
        }
        case 1:
        {
            return _iceD_getColor(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_setBrightness(in, current);
        }
        case 7:
        {
            return _iceD_setColor(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Domotics::RGBLamp::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< RGBLamp, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Domotics::RGBLamp::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< RGBLamp, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Domotics::_icePatchObjectPtr(RGBLampPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = RGBLampPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(RGBLamp::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
